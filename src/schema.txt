-- MySQL Database Schema for Stock Market Simulator

-- Users Table
CREATE TABLE users (
    userID INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    passwordHash VARCHAR(255) NOT NULL,
    dateCreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastLogin TIMESTAMP NULL,
    activePortfolioID VARCHAR(50) NULL
);

-- Portfolios Table
CREATE TABLE portfolios (
    portfolioID VARCHAR(50) PRIMARY KEY,
    userID INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    initialBalance DECIMAL(15, 2) DEFAULT 500.00,
    balance DECIMAL(15, 2) DEFAULT 500.00,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE
);

-- Stocks Table
CREATE TABLE stocks (
    stockID INT AUTO_INCREMENT PRIMARY KEY,
    symbol VARCHAR(5) NOT NULL,
    companyName VARCHAR(100) NOT NULL,
    sector VARCHAR(50),
    isCustom BOOLEAN DEFAULT FALSE,
    userID INT NULL,  -- NULL for system stocks, user ID for custom stocks
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY (symbol, userID),
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE
);

-- Stock Data Table (for historical data)
CREATE TABLE stock_data (
    dataID INT AUTO_INCREMENT PRIMARY KEY,
    stockID INT NOT NULL,
    dataDate DATE NOT NULL,
    openPrice DECIMAL(15, 2) NOT NULL,
    highPrice DECIMAL(15, 2) NOT NULL,
    lowPrice DECIMAL(15, 2) NOT NULL,
    closePrice DECIMAL(15, 2) NOT NULL,
    volume BIGINT,
    FOREIGN KEY (stockID) REFERENCES stocks(stockID) ON DELETE CASCADE,
    UNIQUE KEY (stockID, dataDate)
);

-- Holdings Table
CREATE TABLE holdings (
    holdingID INT AUTO_INCREMENT PRIMARY KEY,
    portfolioID VARCHAR(50) NOT NULL,
    stockID INT NOT NULL,
    quantity INT NOT NULL DEFAULT 0,
    avgPrice DECIMAL(15, 2) NOT NULL,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (portfolioID) REFERENCES portfolios(portfolioID) ON DELETE CASCADE,
    FOREIGN KEY (stockID) REFERENCES stocks(stockID) ON DELETE CASCADE,
    UNIQUE KEY (portfolioID, stockID)
);

-- Transactions Table
CREATE TABLE transactions (
    transactionID VARCHAR(50) PRIMARY KEY,
    portfolioID VARCHAR(50) NOT NULL,
    stockID INT NOT NULL,
    transactionType ENUM('BUY', 'SELL') NOT NULL,
    quantity INT NOT NULL,
    pricePaid DECIMAL(15, 2) NOT NULL,
    totalValue DECIMAL(15, 2) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (portfolioID) REFERENCES portfolios(portfolioID) ON DELETE CASCADE,
    FOREIGN KEY (stockID) REFERENCES stocks(stockID) ON DELETE CASCADE
);

-- Limit Orders Table
CREATE TABLE limit_orders (
    orderID VARCHAR(50) PRIMARY KEY,
    portfolioID VARCHAR(50) NOT NULL,
    stockID INT NOT NULL,
    orderType ENUM('BUY', 'SELL') NOT NULL,
    quantity INT NOT NULL,
    targetPrice DECIMAL(15, 2) NOT NULL,
    status ENUM('active', 'completed', 'cancelled', 'expired', 'failed') NOT NULL DEFAULT 'active',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completedAt TIMESTAMP NULL,
    cancelledAt TIMESTAMP NULL,
    expiredAt TIMESTAMP NULL,
    executionPrice DECIMAL(15, 2) NULL,
    totalValue DECIMAL(15, 2) NULL,
    failReason VARCHAR(255) NULL,
    expiration TIMESTAMP NULL,
    FOREIGN KEY (portfolioID) REFERENCES portfolios(portfolioID) ON DELETE CASCADE,
    FOREIGN KEY (stockID) REFERENCES stocks(stockID) ON DELETE CASCADE
);

-- Simulation Settings Table
CREATE TABLE simulation_settings (
    settingsID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    simulationSpeed INT DEFAULT 1,
    marketVolatility ENUM('low', 'medium', 'high') DEFAULT 'medium',
    eventFrequency ENUM('none', 'low', 'medium', 'high') DEFAULT 'medium',
    startingCash DECIMAL(15, 2) DEFAULT 500.00,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE,
    UNIQUE KEY (userID)
);

-- News Items Table
CREATE TABLE news_items (
    newsID INT AUTO_INCREMENT PRIMARY KEY,
    headline VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL,
    targetType ENUM('company', 'sector', 'market') NOT NULL,
    targetSymbol VARCHAR(5) NULL,
    targetSector VARCHAR(50) NULL,
    impact DECIMAL(5, 4) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    isEvent BOOLEAN DEFAULT FALSE
);

CREATE TABLE sessions (
    sessionID VARCHAR(255) PRIMARY KEY,
    userID INT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expiresAt TIMESTAMP NOT NULL,
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE
);

-- User_Stocks Table (to track which stocks are in a user's simulation)
CREATE TABLE user_stocks (
    userID INT NOT NULL,
    stockID INT NOT NULL,
    addedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (userID, stockID),
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE,
    FOREIGN KEY (stockID) REFERENCES stocks(stockID) ON DELETE CASCADE
);

-- Index definitions for better performance
CREATE INDEX idx_transactions_portfolio ON transactions(portfolioID);
CREATE INDEX idx_holdings_portfolio ON holdings(portfolioID);
CREATE INDEX idx_limit_orders_portfolio ON limit_orders(portfolioID);
CREATE INDEX idx_stock_data_stock_date ON stock_data(stockID, dataDate);



/*
 *  SERVER-SIDE IMPLEMENTATION EXAMPLE (Node.js + Express)
 *  ----------------------------------------------------
 */

// server/index.js
/*
const express = require('express');
const cors = require('cors');
const path = require('path');
const mysql = require('mysql2/promise');
const session = require('express-session');
const MySQLStore = require('express-mysql-session')(session);

// Import routes
const authRoutes = require('./routes/auth');
const userRoutes = require('./routes/users');
const portfolioRoutes = require('./routes/portfolios');
const stockRoutes = require('./routes/stocks');
const transactionRoutes = require('./routes/transactions');
const settingsRoutes = require('./routes/settings');

// Create Express app
const app = express();
const PORT = process.env.PORT || 3000;

// Database connection
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || 'password',
  database: process.env.DB_NAME || 'invested_simulator',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

// Create session store
const sessionStore = new MySQLStore(dbConfig);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../')));

// Session middleware
app.use(session({
  key: 'invested_session',
  secret: process.env.SESSION_SECRET || 'your-secret-key',
  store: sessionStore,
  resave: false,
  saveUninitialized: false,
  cookie: {
    maxAge: 1000 * 60 * 60 * 24 // 24 hours
  }
}));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/portfolios', portfolioRoutes);
app.use('/api/stocks', stockRoutes);
app.use('/api/transactions', transactionRoutes);
app.use('/api/settings', settingsRoutes);

// Serve HTML files
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '../index.html'));
});

app.get('/simulator', (req, res) => {
  res.sendFile(path.join(__dirname, '../simulator.html'));
});

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

module.exports = app;


